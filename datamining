{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "datamining#5.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPRk/+6fZq0grDkx8ZCZWhE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zivvon/datamining/blob/main/datamining\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TTRjgM2GuVuc"
      },
      "source": [
        "**Q. 정부에서 제공하는 서울시 초등학교 신체 검사 기록인 “student_health_2.csv”을 기반으로 분석하고자 한다.**\n",
        "\n",
        "1. 해당 기록 내에서 키와 몸무게를 기반으로 학년을 예측하는 알고리즘을 구현하시오. (Linear Regression or k-NN알고리즘)\n",
        "\n",
        "2. 테스트 값으로 키 : 150, 몸무게 : 45를 입력시 예측된 학년값을 작성하시오.\n",
        "(파이썬의 경우 [150, 45]로 입력 권장)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 76
        },
        "id": "YECEW1RwuV7n",
        "outputId": "5e541ee3-051c-4b12-a8f3-823259ef14f0"
      },
      "source": [
        "from google.colab import files\n",
        "myfile = files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-fbb10f30-257b-4a01-944f-db40029cbade\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-fbb10f30-257b-4a01-944f-db40029cbade\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving netflix_data.csv to netflix_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7tNjzz1rxPRW",
        "outputId": "10e6fbbe-9ef4-49a3-9a03-7c66519db92f"
      },
      "source": [
        "#!/bin/python\n",
        "import csv\n",
        "import numpy as np\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "x_1 = open(\"student_health_2.csv\",\"r\", encoding=\"ISO-8859-1\");\n",
        "x1 = csv.reader(x_1)\n",
        "\n",
        "row3 = []\n",
        "row2 = []\n",
        "row1 = []\n",
        "for row in x1:\n",
        "    row3.append(row[16])\n",
        "    row2.append(row[15])\n",
        "    row1.append(row[11])\n",
        "\n",
        "row_s = []\n",
        "row_n = []\n",
        "for idx_r in range(0,len(row2)//3):\n",
        "    if row1[3*idx_r].isnumeric():\n",
        "        row_n.append(float(row1[3*idx_r]))\n",
        "        row_s.append([float(row2[3*idx_r+1]), float(row3[3*idx_r+1])])\n",
        "\n",
        "#print(row_s)\n",
        "#print(row_n)\n",
        "\n",
        "neigh = KNeighborsClassifier(n_neighbors=4)\n",
        "neigh.fit(row_s, row_n);\n",
        "\n",
        "real1 = neigh.predict([[150, 45]])\n",
        "print(real1)\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zja_WYk0XJuT",
        "outputId": "24cd5c4e-5133-434f-9ebd-38176a6c356b"
      },
      "source": [
        "import csv\n",
        "import numpy as np\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "x_1 = open(\"entry_salary_age_1.csv\",\"r\", encoding=\"ISO-8859-1\");\n",
        "x1 = csv.reader(x_1)\n",
        "\n",
        "row2 = []\n",
        "row1 = []\n",
        "for row in x1:\n",
        "    row2.append(row[9])\n",
        "    row1.append(row[2])\n",
        "\t\n",
        "x_1.close()\n",
        "\n",
        "row_s = []\n",
        "row_n = []\n",
        "for idx_r in range(0,len(row2)//3):\n",
        "    if row1[3*idx_r].isnumeric():\n",
        "        row_n.append(float(row1[3*idx_r]))\n",
        "        row_s.append([float(row2[3*idx_r+1]), float(row2[3*idx_r+2])])\n",
        "\n",
        "neigh = KNeighborsClassifier(n_neighbors=4)\n",
        "neigh.fit(row_s, row_n);\n",
        "\n",
        "real1 = neigh.predict([[100, 100000.0]])\n",
        "print(real1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "5w0qb6RmXpuQ",
        "outputId": "78c3079a-8016-4944-9717-3a2eee670735"
      },
      "source": [
        "from numpy import genfromtxt\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "import csv\n",
        "\n",
        "def make_label_dict(labels):\n",
        "    l = {}\n",
        "    for i, label in enumerate(labels):\n",
        "        l[i] = label\n",
        "    return l\n",
        "    \n",
        "def get_labels(csvfile):\n",
        "    with open(csvfile, 'r') as f:\n",
        "        reader = csv.reader(f, delimiter=',')\n",
        "        # get the first line in csv\\n\n",
        "        labels = reader.__next__()\n",
        "    # return just the letters from pos 1 on\\n\n",
        "    return labels[1:]\n",
        "\n",
        "def show_graph_with_labels(adjacency_matrix, mylabels):\n",
        "    rows, cols = np.where(adjacency_matrix == 1)\n",
        "    edges = zip(rows.tolist(), cols.tolist())\n",
        "    gr = nx.Graph()\n",
        "    gr.add_edges_from(edges)\n",
        "    nx.draw(gr, node_size=500, labels=mylabels, with_labels=True)\n",
        "    plt.show()\n",
        "\n",
        "mydata = genfromtxt('airplane_eng.csv', delimiter=',')\n",
        "print(mydata)\n",
        "print(type(mydata))\n",
        "\n",
        "adjacency = mydata[1:,1:]\n",
        "print(adjacency)\n",
        "\n",
        "\n",
        "show_graph_with_labels(adjacency, make_label_dict(get_labels('airplane_eng.csv')))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\n",
            " [nan  0.  0.  1.  1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  0.  1.  1.  1.  1.  1.  1.  1.  1.  1.  0.  0.  0.  0.]\n",
            " [nan  1.  1.  0.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n",
            " [nan  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  1.  1.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
            " [nan  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n",
            "<class 'numpy.ndarray'>\n",
            "[[0. 0. 1. 1. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 0. 0. 0.]\n",
            " [1. 1. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cQXqUn9YlIE",
        "outputId": "627d8038-ef76-45c9-c660-35fe660f3325"
      },
      "source": [
        "import csv\n",
        "import statistics\n",
        "\n",
        "##Data Read\n",
        "with open('netflix_data.csv', newline='',encoding='utf-8', errors='ignore') as f:\n",
        "    reader = csv.reader(f)\n",
        "    data = list(reader)\n",
        "\n",
        "\n",
        "\n",
        "##Data Extraction\n",
        "cnt = 1;\n",
        "date_added = [];\n",
        "country_list = [];\n",
        "content_type = [];\n",
        "rel_yrs = [];\n",
        "duration = [];\n",
        "while(cnt < len(data)):\n",
        "    content_type.append(data[cnt][1]);\n",
        "    country_list.append(data[cnt][5]);\n",
        "    date_added.append(data[cnt][6]);\n",
        "    rel_yrs.append(data[cnt][7]);\n",
        "    duration.append(data[cnt][9]);\n",
        "    cnt+=1;\n",
        "\t\n",
        "\n",
        "\n",
        "##Content Type Count\n",
        "m_cnt = 0;\n",
        "tv_cnt =0;\n",
        "m_c_cnt = [0,0,0,0]\n",
        "cnt = 0;\n",
        "while(cnt < len(content_type)):\n",
        "    if(content_type[cnt].lstrip() == \"Movie\"):\n",
        "        m_cnt += 1;\n",
        "\n",
        "    elif(content_type[cnt].lstrip() == \"TV Show\"):\n",
        "        tv_cnt += 1;\n",
        "    \n",
        "    cnt+=1;\n",
        "\n",
        "print(\"Movie/TV show Count\")\n",
        "print(\"Movie: \", m_cnt)\n",
        "print(\"TV Show: \", tv_cnt)\n",
        "\n",
        "\n",
        "##Country Count (United States, South Korea, Thailand, United Kingdom)\n",
        "\n",
        "c_cnt = [0,0,0,0] #1:US, 2:SK, 3:TH, 4:UK\n",
        "cnt = 0;\n",
        "print(len(country_list))\n",
        "while(cnt < len(country_list)):\n",
        "    c_list = country_list[cnt].split(\",\")\n",
        "    if(len(c_list) > 1):\n",
        "        for a in range(0,len(c_list)):\n",
        "            if(c_list[a].lstrip() == 'United States'):\n",
        "                c_cnt[0] += 1;\n",
        "            elif(c_list[a].lstrip() == 'South Korea'):\n",
        "                c_cnt[1] += 1;\n",
        "            elif(c_list[a].lstrip() == 'Thailand'):\n",
        "                c_cnt[2] += 1;\n",
        "            elif(c_list[a].lstrip() == 'United Kingdom'):\n",
        "                c_cnt[3] += 1;\n",
        "\n",
        "\n",
        "    else:\n",
        "        if(c_list[0].lstrip() == 'United States'):\n",
        "            c_cnt[0] += 1;\n",
        "        elif(c_list[0].lstrip() == 'South Korea'):\n",
        "            c_cnt[1] += 1;\n",
        "        elif(c_list[0].lstrip() == 'Thailand'):\n",
        "            c_cnt[2] += 1;\n",
        "        elif(c_list[0].lstrip() == 'United Kingdom'):\n",
        "            c_cnt[3] += 1;\n",
        "\n",
        "    cnt+=1\n",
        "\n",
        "\n",
        "print(\"\\nContent Country Count\")\n",
        "print(\"United States:\", c_cnt[0])\n",
        "print(\"South Korea:\", c_cnt[1])\n",
        "print(\"Thailand:\",c_cnt[2])\n",
        "print(\"United Kingdom:\",c_cnt[3])\n",
        "\n",
        "\n",
        "##Date Added \n",
        "\n",
        "yrs_cnt = [0,0,0,0,0,0,0,0,0,0,0,0,0] #2008-2020\n",
        "yrs_list = [];\n",
        "yrs_list_1 = [];\n",
        "cnt = 0;\n",
        "while(cnt < len(date_added)):\n",
        "    if(len(date_added[cnt].split(\"-\")) > 1):\n",
        "        c_list = date_added[cnt].split(\"-\")\n",
        "        yrs = int(c_list[2])+2000\n",
        "        yrs_list.append((yrs))\n",
        "        yrs_list_1.append(int(rel_yrs[cnt]))\n",
        "        yrs_cnt[yrs-2008] += 1;\n",
        "    elif(len(date_added[cnt].split(\",\")) > 1):\n",
        "        c_list = date_added[cnt].split(\",\")\n",
        "        yrs = int(c_list[1])\n",
        "        yrs_list.append(int(yrs))\n",
        "        yrs_list_1.append(int(rel_yrs[cnt]))\n",
        "        yrs_cnt[yrs-2008] += 1;\n",
        "\n",
        "    cnt+=1\n",
        "\n",
        "\n",
        "print(\"\\nYear(Date Added) Count (2008-2020)\")\n",
        "print(yrs_cnt)\n",
        "\n",
        "\n",
        "##Duration\n",
        "du_cnt = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] #10 mins increments \n",
        "du_list = [[],[],[],[],[],[],[],[],[],[],[],[]];\n",
        "du_list_1 = [];\n",
        "cnt = 0;\n",
        "while(cnt < len(duration)):\n",
        "    c_list =duration[cnt].split(\" \")\n",
        "    if(c_list[1] != \"Season\" and c_list[1] != \"Seasons\"):\n",
        "        if(c_list[0].isnumeric()):\n",
        "            if(int(c_list[0]) > 220):\n",
        "                c_list[0] = \"230\"\n",
        "            du_cnt[int(c_list[0])//20] += 1;\n",
        "            du_list[int(c_list[0])//20].append(int(c_list[0])) \n",
        "            du_list_1.append(int(c_list[0])) \n",
        "\t  \n",
        "    \t\n",
        "    cnt+=1\n",
        "\n",
        "\n",
        "print(\"\\nDuration Count/Mean/Median/Max/Min\")\n",
        "print(du_cnt)\n",
        "print(\"Mean:\", statistics.mean(du_list_1))\n",
        "print(\"Median:\", statistics.median(du_list_1))\n",
        "print(\"Max:\", max(du_list_1))\n",
        "print(\"Min:\",min(du_list_1))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "##For Pivot Table Generation\n",
        "##Country Count + Years for Duration (United States, South Korea, Thailand, United Kingdom)  + duration\n",
        "\n",
        "\n",
        "du_list_us = [[],[],[],[],[],[],[],[],[],[],[],[],[]];\n",
        "du_list_rok = [[],[],[],[],[],[],[],[],[],[],[],[],[]];\n",
        "du_list_th = [[],[],[],[],[],[],[],[],[],[],[],[],[]];\n",
        "du_list_uk = [[],[],[],[],[],[],[],[],[],[],[],[],[]];\n",
        "\n",
        "c_cnt = [0,0,0,0] #1:US, 2:SK, 3:TH, 4:UK\n",
        "cnt = 0;\n",
        "\n",
        "print(\"\\nPivot Table\")\n",
        "print(\"US ROK Thai UK\")\n",
        "while(cnt < len(country_list)):\n",
        "    c_list = country_list[cnt].split(\",\")\n",
        "    if(len(c_list) > 1):\n",
        "        for a in range(0,len(c_list)):\n",
        "            if(c_list[a].lstrip() == 'United States'):\n",
        "                c_cnt[0] += 1;\n",
        "                d_list =duration[cnt].split(\" \")\n",
        "                if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                    if(d_list[0].isnumeric()):\n",
        "                        if(int(d_list[0]) > 220):\n",
        "                            d_list[0] = \"230\"\n",
        "                        du_list_us[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "            elif(c_list[a].lstrip() == 'South Korea'):\n",
        "                c_cnt[1] += 1;\n",
        "                d_list =duration[cnt].split(\" \")\n",
        "                if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                    if(d_list[0].isnumeric()):\n",
        "                        if(int(d_list[0]) > 220):\n",
        "                            d_list[0] = \"230\"\n",
        "                        du_list_rok[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "            elif(c_list[a].lstrip() == 'Thailand'):\n",
        "                c_cnt[2] += 1;\n",
        "                d_list =duration[cnt].split(\" \")\n",
        "                if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                    if(d_list[0].isnumeric()):\n",
        "                        if(int(d_list[0]) > 220):\n",
        "                            d_list[0] = \"230\"\n",
        "                        du_list_th[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "            elif(c_list[a].lstrip() == 'United Kingdom'):\n",
        "                c_cnt[3] += 1;\n",
        "                d_list =duration[cnt].split(\" \")\n",
        "                if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                    if(d_list[0].isnumeric()):\n",
        "                        if(int(d_list[0]) > 220):\n",
        "                            d_list[0] = \"230\"\n",
        "                        du_list_uk[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "\n",
        "\n",
        "    else:\n",
        "        if(c_list[0].lstrip() == 'United States'):\n",
        "            c_cnt[0] += 1;\n",
        "            d_list =duration[cnt].split(\" \")\n",
        "            if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                if(d_list[0].isnumeric()):\n",
        "                    if(int(d_list[0]) > 220):\n",
        "                        d_list[0] = \"230\"\n",
        "                    du_list_us[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "        elif(c_list[0].lstrip() == 'South Korea'):\n",
        "            c_cnt[1] += 1;\n",
        "            d_list =duration[cnt].split(\" \")\n",
        "            if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                if(d_list[0].isnumeric()):\n",
        "                    if(int(d_list[0]) > 220):\n",
        "                        d_list[0] = \"230\"\n",
        "                    du_list_rok[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "        elif(c_list[0].lstrip() == 'Thailand'):\n",
        "            c_cnt[2] += 1;\n",
        "            d_list =duration[cnt].split(\" \")\n",
        "            if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                if(d_list[0].isnumeric()):\n",
        "                    if(int(d_list[0]) > 220):\n",
        "                        d_list[0] = \"230\"\n",
        "                    du_list_th[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "        elif(c_list[0].lstrip() == 'United Kingdom'):\n",
        "            c_cnt[3] += 1;\n",
        "            d_list =duration[cnt].split(\" \")\n",
        "            if(d_list[1] != \"Season\" and d_list[1] != \"Seasons\"):\n",
        "                if(d_list[0].isnumeric()):\n",
        "                    if(int(d_list[0]) > 220):\n",
        "                        d_list[0] = \"230\"\n",
        "                    du_list_uk[yrs_list[cnt]-2008].append(int(d_list[0]))\n",
        "\n",
        "    cnt+=1\n",
        "\n",
        "\n",
        "\n",
        "for a in range(0,13):\n",
        "    du_list_o = du_list_us[a]+du_list_rok[a]+du_list_th[a]+du_list_uk[a]\n",
        "    if(len(du_list_o) > 0):\n",
        "        du_list_avg = sum(du_list_o)/len(du_list_o)\n",
        "\n",
        "    if not du_list_us[a]:\n",
        "        du_list_us[a] = [0];\n",
        "\n",
        "    if not du_list_rok[a]:\n",
        "        du_list_rok[a] = [0];\n",
        "\n",
        "    if not du_list_th[a]:\n",
        "        du_list_th[a] = [0];\n",
        "    if not du_list_uk[a]:\n",
        "        du_list_uk[a] = [0];\n",
        "\n",
        "    print(statistics.mean(du_list_us[a]), statistics.mean(du_list_rok[a]), statistics.mean(du_list_th[a]), statistics.mean(du_list_uk[a]))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Movie/TV show Count\n",
            "Movie:  4263\n",
            "TV Show:  1968\n",
            "6231\n",
            "\n",
            "Content Country Count\n",
            "United States: 2608\n",
            "South Korea: 161\n",
            "Thailand: 56\n",
            "United Kingdom: 601\n",
            "\n",
            "Year(Date Added) Count (2008-2020)\n",
            "[2, 2, 1, 13, 7, 12, 25, 90, 455, 1299, 1780, 2346, 184]\n",
            "\n",
            "Duration Count/Mean/Median/Max/Min\n",
            "[11, 87, 232, 456, 1513, 1105, 552, 197, 83, 15, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
            "Mean: 99.0643192488263\n",
            "Median: 98.0\n",
            "Max: 230\n",
            "Min: 3\n",
            "\n",
            "Pivot Table\n",
            "US ROK Thai UK\n",
            "58.5 0 0 0\n",
            "0 0 0 85\n",
            "0 0 0 0\n",
            "92.0909090909091 0 0 0\n",
            "118.33333333333333 0 0 0\n",
            "72.6 0 0 0\n",
            "79.4 0 0 106\n",
            "84.16129032258064 0 0 90.625\n",
            "80.48760330578513 106.14285714285714 111.5 79.4074074074074\n",
            "87.54782608695652 114.75 93.5 90.29268292682927\n",
            "91.84682713347921 129.875 109.04166666666667 100.05\n",
            "93.35566382460414 105.13333333333334 103.875 99.7410071942446\n",
            "104.02564102564102 87.66666666666667 0 110.9\n"
          ]
        }
      ]
    }
  ]
}